name: Build and Release Firmware

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  workflow_dispatch: # Uncommented for manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Updated to v4

    - name: Set up Python
      uses: actions/setup-python@v5 # Updated to v5
      with:
        python-version: '3.9'

    - name: Install PlatformIO
      run: pip install platformio

    - name: Build firmware
      run: pio run

    - name: Find firmware file
      run: |
        # More robust firmware file detection
        FIRMWARE_PATH=$(find .pio/build -name "*.bin" -o -name "*.hex" -o -name "*.elf" | head -n 1)
        if [ -z "$FIRMWARE_PATH" ]; then
          echo "‚ùå No firmware file found!"
          exit 1
        fi
        echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
        echo "FIRMWARE_NAME=$(basename $FIRMWARE_PATH)" >> $GITHUB_ENV
        echo "Found firmware: $FIRMWARE_PATH"

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4 # Updated to v4
      with:
        name: firmware-bin
        path: ${{ env.FIRMWARE_PATH }}

#change github settings/actions/workflow_permissions to allow write permission to actions
    - name: Create GitHub Release (only for tags)
      if: startsWith(github.ref, 'refs/tags/') # Only run for tags, not branch pushes
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          Automated firmware build for ${{ github.ref_name }}
          
          **Build Details:**
          - Commit: ${{ github.sha }}
          - Triggered by: ${{ github.actor }}
          - Date: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') }}

    - name: Upload firmware to release
      if: startsWith(github.ref, 'refs/tags/') # Only run for tags
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.FIRMWARE_PATH }}
        tag_name: ${{ github.ref_name }}

    - name: Publish MQTT notification
      if: startsWith(github.ref, 'refs/tags/') # Only run for tags
      env:
        FIRMWARE_URL: "https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/${{ env.FIRMWARE_NAME }}"
      run: |
        echo "üì° Sending MQTT notification for version ${{ github.ref_name }}"
        pip install paho-mqtt
        python3 -c "
        import paho.mqtt.publish as publish
        import json
        
        payload = {
            'version': '${{ github.ref_name }}',
            'url': '$FIRMWARE_URL',
            'repository': '${{ github.repository }}',
            'commit': '${{ github.sha }}'
        }
        
        try:
            publish.single(
                'firmware/updates',
                json.dumps(payload),
                hostname='broker.hivemq.com',
                port=1883,
                retain=True  # Keep message for new subscribers
            )
            print('‚úÖ MQTT notification sent successfully')
        except Exception as e:
            print(f'‚ùå Failed to send MQTT notification: {e}')
            exit(1)
        "